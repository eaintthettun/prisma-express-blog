// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  posts        Post[] //user can write many posts
  photo        String        @default("https://cdn-icons-png.flaticon.com/512/149/149071.png")
  comments     Comment[]
  likes        Like[] //Likes given by this user
  commentLikes CommentLike[]
}

model Post {
  id         Int       @id @default(autoincrement())
  title      String
  content    String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   Int
  createdAt  DateTime  @default(now())
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  comments   Comment[]
  likes      Like[] // Likes received by this post
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  author    User    @relation(fields: [authorId], references: [id]) //which user like this comment
  authorId  Int
  comment   Comment @relation(fields: [commentId], references: [id]) //which comment is liked
  commentId Int

  @@unique([authorId, commentId]) // Prevent double-likes
}

model Like {
  id       Int  @id @default(autoincrement())
  author   User @relation(fields: [authorId], references: [id]) //who like this
  authorId Int
  post     Post @relation(fields: [postId], references: [id]) //under which post
  postId   Int

  @@unique([authorId, postId]) // Prevent duplicate likes
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String
  post         Post          @relation(fields: [postId], references: [id])
  postId       Int
  author       User          @relation(fields: [authorId], references: [id])
  authorId     Int
  createdAt    DateTime      @default(now())
  commentLikes CommentLike[]
}

//npx prisma init
//npx prisma generate (read database url in .env file)
//npx prisma db push (add database to mongo db cluster)
//npx prisma studio
// npx prisma migrate dev --name init

//to add new column in database
// npx prisma migrate dev --name add_user_photo
// npx prisma generate
//npx prisma db push
